#NAMESPACE=gamelogic
dependencies::depends "gpscalc/haversine"
dependencies::depends "redis/redis"
dependencies::depends "queue/client"

namespaced EXPIRE_IN=60
namespaced GAME_QUEUE=game

function register_player(id latitude longitude accuracy) {
    local playername=$(redis::get "$id"-name)
    redis::update_list_item "players" "$id" ${namespaced EXPIRE_IN}
    redis::setex $id-position "{\"latitude\": $latitude, \"longitude\": $longitude, \"accuracy\": $accuracy, \"id\": \"$id\", \"name\": \"$playername\"}" ${namespaced EXPIRE_IN}
}

function distance(id) {
    local position=`redis::get "$id"-position`
    local latitude=`echo $position | jq .latitude`
    local longitude=`echo $position | jq .longitude`
    gps_haversine::distance $latitude $longitude `this::target | jq .latitude` `this::target | jq .longitude` | cut -d\. -f1
}

function bearing(id) {
    local position=`redis::get $id-position | jq .`
    local latitude=`echo $position | jq .latitude`
    local longitude=`echo $position | jq .longitude`
    gps_haversine::bearing $latitude $longitude `this::target | jq .latitude` `this::target | jq .longitude` | cut -d\. -f1
}

function hint(id) {
    local distance=`this::distance $id`
    this::target | jq -r ".hints[] | select (.min_distance <= $distance) | select (.max_distance >= $distance) | .hint" | base64 -d | jq -R -s '.'
}

function target() {
    local target_id=`queue_client::peek ${namespaced GAME_QUEUE}`
    if [[ -z $target_id ]]; then
        echo '{"longitude":0, "latitude":0, "hints":[{"min_distance":0, "max_distance":650437100, "hint":""}], "key":-1}'
        return
    fi
    local target=$(cat $DIR/vars/gamedata.json | jq --arg target $target_id '.[] | select (.id == $target) | .')
    if [[ `echo "$target" | jq -r '.type'` != "uuid" ]]; then
        echo $target
        return
    fi

    local id=`echo "$target" | jq -r '.uuid'`
    local position=`redis::get $id-position | jq .`
    local latitude=`echo $position | jq .latitude`
    if [[ -z $latitude ]]; then
        latitude=0
    fi
    local longitude=`echo $position | jq .longitude`
    if [[ -z $longitude ]]; then
        longitude=0
    fi
    target=`echo "$target" | jq --arg latitude "$latitude" --arg longitude "$longitude" '. + {"longitude":($longitude|tonumber), "latitude":($latitude|tonumber)}'`
    echo $target
}

function solve(solution_key) {
    if [[ `echo "$solution_key" | sha512sum | cut -d\  -f1` == $(echo `this::target` | jq -r .key ) ]]
    then
        this::advance
    fi
}

function advance() {
    logger::log "warn" "solved"
    queue_client::get ${namespaced GAME_QUEUE}
}

function player_positions() {
    local points=""
    for item in `redis::peek_multiple players 0 999`
    do
        local positem=`redis::get "$item"-position | jq -c .`
        if [[ $? -eq 0 && $positem != "" ]]; then
            points="$positem,$points"
        fi
    done
    points=${points%?}
    echo "$points"
}