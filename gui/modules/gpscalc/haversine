#NAMESPACE=gps_haversine

function deg2rad (deg) {
        bc -l <<< "$deg * 0.0174532925"
}

function rad2deg (rad) {
        bc -l <<< "$rad * 57.2957795"
}

function acos (angle) {
        local pi="3.141592653589793"
        bc -l <<<"$pi / 2 - a($angle / sqrt(1 - $angle * $angle))"
}

function distance (lat1 lon1 lat2 lon2) {

        BC_ENV_ARGS=-qs
        export BC_ENV_ARGS

        # assignment of constants, variables and functions
        # p: multiply with to convert from degrees to radians (π/180)
        # r: earth radius in metres
        # d: distance
        # h: haversine intermediate
        # i,j: (lat,lon) point 1
        # x,y: (lat,lon) point 2
        # k: delta lat
        # l: delta lon
        # m: sin(k/2) (square root of hav(k))
        # n: sin(l/2) (  partial haversine  )
        # n(x): arcsin(x)
        # r(x,n): round x to n decimal digits
        # v(x): sign (Vorzeichen)
        # w(x): min(1, sqrt(x)) (Wurzel)

        bc -l << EOF
        scale=64
        define n(x) {
        	if (x == -1) return (-2 * a(1))
        	if (x == 1) return (2 * a(1))
        	return (a(x / sqrt(1 - x*x)))
        }
        define v(x) {
        	if (x < 0) return (-1)
        	if (x > 0) return (1)
        	return (0)
        }
        define r(x, n) {
        	auto o
        	o = scale
        	if (scale < (n + 1)) scale = (n + 1)
        	x += v(x) * 0.5 * A^-n
        	scale = n
        	x /= 1
        	scale = o
        	return (x)
        }
        define w(x) {
        	if (x >= 1) return (1)
        	return (sqrt(x))
        }
        /* WGS84 reference ellipsoid: große Halbachse (metres), Abplattung */
        i = 6378137.000
        x = 1/298.257223563
        /* other axis */
        j = i * (1 - x)
        /* mean radius resulting */
        r = (2 * i + j) / 3
        /* coordinates */
        p = (4 * a(1) / 180)
        i = (p * $lat1)
        j = (p * $lon1)
        x = (p * $lat2)
        y = (p * $lon2)
        /* calculation */
        k = (x - i)
        l = (y - j)
        m = s(k / 2)
        n = s(l / 2)
        h = ((m * m) + (c(i) * c(x) * n * n))
        d = 2 * r * n(w(h))
        r(d, 3)
EOF
}


function bearing (lat1 lon1 lat2 lon2) {
#	θ = atan2( sin Δλ ⋅ cos φ2 , cos φ1 ⋅ sin φ2 − sin φ1 ⋅ cos φ2 ⋅ cos Δλ )
        local pi="3.141592653589793"
        local delta_lat=`bc <<<"$lat2 - $lat1"`
        local delta_lon=`bc <<<"$lon2 - $lon1"`
        lat1="`this::deg2rad $lat1`"
        lon1="`this::deg2rad $lon1`"
        lat2="`this::deg2rad $lat2`"
        lon2="`this::deg2rad $lon2`"
        delta_lat="`this::deg2rad $delta_lat`"
        delta_lon="`this::deg2rad $delta_lon`"
        local x=`bc -l <<< "s($delta_lon) * c($lat1)"`
        local y=`bc -l <<< "(c($lat1)*s($lat2)) - (s($lat1)*c($lat2)*c($delta_lon))"`
        local bearing=`awk "BEGIN {print atan2($x, $y)}"`
        bearing=`bc -l <<< "(($bearing*180) / $pi) + 360 % 360"`
        echo $bearing
}